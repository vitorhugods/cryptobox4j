name: CI/CD

env:
  CRYPTOBOX_IMAGE: wirebot/cryptobox
  RUNTIME_IMAGE: wirebot/runtime

on:
  workflow_dispatch:
#  pull_request:

jobs:
  docker-builds:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

        # do not push if this pipeline runs on PR
      - name: Determine Docker Push
        run: |
          echo "PUSH=${{ github.event.pull_request == null }}" >> $GITHUB_ENV

      # determine latest tag to use for docker deployment
      - name: Get Latest Tag
        id: tags
        uses: WyriHaximus/github-action-get-previous-tag@master

        # setup docker actions https://github.com/docker/build-push-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: ${{ env.PUSH == 'true' }} # no need to login if this is PR
        with:
          username: wirebot
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Meta Cryptobox
        id: docker_meta_cryptobox
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.CRYPTOBOX_IMAGE }}

      - name: Build Cryptobox
        uses: docker/build-push-action@v2
        with:
          context: .
          file: dockerfiles/Dockerfile.cryptobox
          tags: ${{ env.CRYPTOBOX_IMAGE }}:latest,${{ env.CRYPTOBOX_IMAGE }}:${{ steps.tags.outputs.tag }}
          labels: ${{ steps.docker_meta_cryptobox.outputs.labels }}
          push: ${{ env.PUSH == 'true' }}

      # we build both images in one phase in order to leverage cache
      - name: Docker Meta Runtime
        id: docker_meta_runtime
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.RUNTIME_IMAGE }}

      - name: Build Runtime
        uses: docker/build-push-action@v2
        with:
          context: .
          file: dockerfiles/Dockerfile.runtime
          tags: ${{ env.RUNTIME_IMAGE }}:latest,${{ env.RUNTIME_IMAGE }}:${{ steps.tags.outputs.tag }}
          labels: ${{ steps.docker_meta_runtime.outputs.labels }}
          push: ${{ env.PUSH == 'true' }}

      # Send webhook to Wire using Slack Bot
      - name: Webhook to Wire
        uses: 8398a7/action-slack@v2
        with:
          status: ${{ job.status }}
          author_name: Docker CI pipeline
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WEBHOOK_CI }}
        # Send message only if previous step failed
        if: failure()
